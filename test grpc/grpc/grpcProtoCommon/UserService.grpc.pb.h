// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UserService.proto
// Original file comments:
// Protobuf file for a user service operations
//
#ifndef GRPC_UserService_2eproto__INCLUDED
#define GRPC_UserService_2eproto__INCLUDED

#include "UserService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class UserServiceOperations final {
 public:
  static constexpr char const* service_full_name() {
    return "UserServiceOperations";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Notification stream from the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::NotificationMessageDto>> StartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::NotificationMessageDto>>(StartNotificationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>> AsyncStartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>>(AsyncStartNotificationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>> PrepareAsyncStartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>>(PrepareAsyncStartNotificationStreamRaw(context, request, cq));
    }
    // Send file for process
    virtual ::grpc::Status ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::ProcessResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>> AsyncProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>>(AsyncProcessFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>> PrepareAsyncProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>>(PrepareAsyncProcessFileRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Notification stream from the server
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartNotificationStream(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::NotificationMessageDto>* reactor) = 0;
      #else
      virtual void StartNotificationStream(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::NotificationMessageDto>* reactor) = 0;
      #endif
      // Send file for process
      virtual void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::NotificationMessageDto>* StartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>* AsyncStartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::NotificationMessageDto>* PrepareAsyncStartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>* AsyncProcessFileRaw(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ProcessResult>* PrepareAsyncProcessFileRaw(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::NotificationMessageDto>> StartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::NotificationMessageDto>>(StartNotificationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::NotificationMessageDto>> AsyncStartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::NotificationMessageDto>>(AsyncStartNotificationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::NotificationMessageDto>> PrepareAsyncStartNotificationStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::NotificationMessageDto>>(PrepareAsyncStartNotificationStreamRaw(context, request, cq));
    }
    ::grpc::Status ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::ProcessResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ProcessResult>> AsyncProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ProcessResult>>(AsyncProcessFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ProcessResult>> PrepareAsyncProcessFile(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ProcessResult>>(PrepareAsyncProcessFileRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartNotificationStream(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::NotificationMessageDto>* reactor) override;
      #else
      void StartNotificationStream(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::NotificationMessageDto>* reactor) override;
      #endif
      void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessFile(::grpc::ClientContext* context, const ::DicomFileDto* request, ::ProcessResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::NotificationMessageDto>* StartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::NotificationMessageDto>* AsyncStartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::NotificationMessageDto>* PrepareAsyncStartNotificationStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ProcessResult>* AsyncProcessFileRaw(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ProcessResult>* PrepareAsyncProcessFileRaw(::grpc::ClientContext* context, const ::DicomFileDto& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartNotificationStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Notification stream from the server
    virtual ::grpc::Status StartNotificationStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::NotificationMessageDto>* writer);
    // Send file for process
    virtual ::grpc::Status ProcessFile(::grpc::ServerContext* context, const ::DicomFileDto* request, ::ProcessResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartNotificationStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNotificationStream(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::NotificationMessageDto>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFile(::grpc::ServerContext* context, ::DicomFileDto* request, ::grpc::ServerAsyncResponseWriter< ::ProcessResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartNotificationStream<WithAsyncMethod_ProcessFile<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartNotificationStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::NotificationMessageDto>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request) { return this->StartNotificationStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::NotificationMessageDto>* StartNotificationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::NotificationMessageDto>* StartNotificationStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::DicomFileDto, ::ProcessResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DicomFileDto* request, ::ProcessResult* response) { return this->ProcessFile(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessFile(
        ::grpc::experimental::MessageAllocator< ::DicomFileDto, ::ProcessResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DicomFileDto, ::ProcessResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessFile(
      ::grpc::CallbackServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartNotificationStream<ExperimentalWithCallbackMethod_ProcessFile<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartNotificationStream<ExperimentalWithCallbackMethod_ProcessFile<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartNotificationStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartNotificationStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNotificationStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartNotificationStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->StartNotificationStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StartNotificationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* StartNotificationStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DicomFileDto, ::ProcessResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DicomFileDto, ::ProcessResult>* streamer) {
                       return this->StreamedProcessFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessFile(::grpc::ServerContext* /*context*/, const ::DicomFileDto* /*request*/, ::ProcessResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DicomFileDto,::ProcessResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessFile<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StartNotificationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StartNotificationStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::NotificationMessageDto>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::NotificationMessageDto>* streamer) {
                       return this->StreamedStartNotificationStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StartNotificationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartNotificationStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::NotificationMessageDto>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStartNotificationStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::NotificationMessageDto>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StartNotificationStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_StartNotificationStream<WithStreamedUnaryMethod_ProcessFile<Service > > StreamedService;
};


#endif  // GRPC_UserService_2eproto__INCLUDED
