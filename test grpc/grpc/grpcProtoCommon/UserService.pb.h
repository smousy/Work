// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserService_2eproto;
class DicomFileDto;
class DicomFileDtoDefaultTypeInternal;
extern DicomFileDtoDefaultTypeInternal _DicomFileDto_default_instance_;
class MetadataDto;
class MetadataDtoDefaultTypeInternal;
extern MetadataDtoDefaultTypeInternal _MetadataDto_default_instance_;
class NotificationMessageDto;
class NotificationMessageDtoDefaultTypeInternal;
extern NotificationMessageDtoDefaultTypeInternal _NotificationMessageDto_default_instance_;
class ProcessResult;
class ProcessResultDefaultTypeInternal;
extern ProcessResultDefaultTypeInternal _ProcessResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DicomFileDto* Arena::CreateMaybeMessage<::DicomFileDto>(Arena*);
template<> ::MetadataDto* Arena::CreateMaybeMessage<::MetadataDto>(Arena*);
template<> ::NotificationMessageDto* Arena::CreateMaybeMessage<::NotificationMessageDto>(Arena*);
template<> ::ProcessResult* Arena::CreateMaybeMessage<::ProcessResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DicomFileDto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DicomFileDto) */ {
 public:
  inline DicomFileDto() : DicomFileDto(nullptr) {}
  virtual ~DicomFileDto();

  DicomFileDto(const DicomFileDto& from);
  DicomFileDto(DicomFileDto&& from) noexcept
    : DicomFileDto() {
    *this = ::std::move(from);
  }

  inline DicomFileDto& operator=(const DicomFileDto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomFileDto& operator=(DicomFileDto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomFileDto& default_instance();

  static inline const DicomFileDto* internal_default_instance() {
    return reinterpret_cast<const DicomFileDto*>(
               &_DicomFileDto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DicomFileDto& a, DicomFileDto& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomFileDto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomFileDto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomFileDto* New() const final {
    return CreateMaybeMessage<DicomFileDto>(nullptr);
  }

  DicomFileDto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomFileDto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomFileDto& from);
  void MergeFrom(const DicomFileDto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomFileDto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DicomFileDto";
  }
  protected:
  explicit DicomFileDto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserService_2eproto);
    return ::descriptor_table_UserService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .MetadataDto Metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::MetadataDto* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >*
      mutable_metadata();
  private:
  const ::MetadataDto& _internal_metadata(int index) const;
  ::MetadataDto* _internal_add_metadata();
  public:
  const ::MetadataDto& metadata(int index) const;
  ::MetadataDto* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >&
      metadata() const;

  // bytes Data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:DicomFileDto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserService_2eproto;
};
// -------------------------------------------------------------------

class MetadataDto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetadataDto) */ {
 public:
  inline MetadataDto() : MetadataDto(nullptr) {}
  virtual ~MetadataDto();

  MetadataDto(const MetadataDto& from);
  MetadataDto(MetadataDto&& from) noexcept
    : MetadataDto() {
    *this = ::std::move(from);
  }

  inline MetadataDto& operator=(const MetadataDto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataDto& operator=(MetadataDto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataDto& default_instance();

  static inline const MetadataDto* internal_default_instance() {
    return reinterpret_cast<const MetadataDto*>(
               &_MetadataDto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetadataDto& a, MetadataDto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataDto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataDto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataDto* New() const final {
    return CreateMaybeMessage<MetadataDto>(nullptr);
  }

  MetadataDto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataDto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataDto& from);
  void MergeFrom(const MetadataDto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataDto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetadataDto";
  }
  protected:
  explicit MetadataDto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserService_2eproto);
    return ::descriptor_table_UserService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:MetadataDto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserService_2eproto;
};
// -------------------------------------------------------------------

class ProcessResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessResult) */ {
 public:
  inline ProcessResult() : ProcessResult(nullptr) {}
  virtual ~ProcessResult();

  ProcessResult(const ProcessResult& from);
  ProcessResult(ProcessResult&& from) noexcept
    : ProcessResult() {
    *this = ::std::move(from);
  }

  inline ProcessResult& operator=(const ProcessResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessResult& operator=(ProcessResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessResult& default_instance();

  static inline const ProcessResult* internal_default_instance() {
    return reinterpret_cast<const ProcessResult*>(
               &_ProcessResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessResult& a, ProcessResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessResult* New() const final {
    return CreateMaybeMessage<ProcessResult>(nullptr);
  }

  ProcessResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessResult& from);
  void MergeFrom(const ProcessResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessResult";
  }
  protected:
  explicit ProcessResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserService_2eproto);
    return ::descriptor_table_UserService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // repeated .MetadataDto Metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::MetadataDto* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >*
      mutable_metadata();
  private:
  const ::MetadataDto& _internal_metadata(int index) const;
  ::MetadataDto* _internal_add_metadata();
  public:
  const ::MetadataDto& metadata(int index) const;
  ::MetadataDto* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:ProcessResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto > metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserService_2eproto;
};
// -------------------------------------------------------------------

class NotificationMessageDto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotificationMessageDto) */ {
 public:
  inline NotificationMessageDto() : NotificationMessageDto(nullptr) {}
  virtual ~NotificationMessageDto();

  NotificationMessageDto(const NotificationMessageDto& from);
  NotificationMessageDto(NotificationMessageDto&& from) noexcept
    : NotificationMessageDto() {
    *this = ::std::move(from);
  }

  inline NotificationMessageDto& operator=(const NotificationMessageDto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationMessageDto& operator=(NotificationMessageDto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationMessageDto& default_instance();

  static inline const NotificationMessageDto* internal_default_instance() {
    return reinterpret_cast<const NotificationMessageDto*>(
               &_NotificationMessageDto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationMessageDto& a, NotificationMessageDto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationMessageDto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationMessageDto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationMessageDto* New() const final {
    return CreateMaybeMessage<NotificationMessageDto>(nullptr);
  }

  NotificationMessageDto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationMessageDto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationMessageDto& from);
  void MergeFrom(const NotificationMessageDto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationMessageDto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotificationMessageDto";
  }
  protected:
  explicit NotificationMessageDto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserService_2eproto);
    return ::descriptor_table_UserService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string Message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:NotificationMessageDto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DicomFileDto

// repeated .MetadataDto Metadata = 1;
inline int DicomFileDto::_internal_metadata_size() const {
  return metadata_.size();
}
inline int DicomFileDto::metadata_size() const {
  return _internal_metadata_size();
}
inline void DicomFileDto::clear_metadata() {
  metadata_.Clear();
}
inline ::MetadataDto* DicomFileDto::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:DicomFileDto.Metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >*
DicomFileDto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:DicomFileDto.Metadata)
  return &metadata_;
}
inline const ::MetadataDto& DicomFileDto::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::MetadataDto& DicomFileDto::metadata(int index) const {
  // @@protoc_insertion_point(field_get:DicomFileDto.Metadata)
  return _internal_metadata(index);
}
inline ::MetadataDto* DicomFileDto::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::MetadataDto* DicomFileDto::add_metadata() {
  // @@protoc_insertion_point(field_add:DicomFileDto.Metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >&
DicomFileDto::metadata() const {
  // @@protoc_insertion_point(field_list:DicomFileDto.Metadata)
  return metadata_;
}

// bytes Data = 2;
inline void DicomFileDto::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& DicomFileDto::data() const {
  // @@protoc_insertion_point(field_get:DicomFileDto.Data)
  return _internal_data();
}
inline void DicomFileDto::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:DicomFileDto.Data)
}
inline std::string* DicomFileDto::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DicomFileDto.Data)
  return _internal_mutable_data();
}
inline const std::string& DicomFileDto::_internal_data() const {
  return data_.Get();
}
inline void DicomFileDto::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicomFileDto::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DicomFileDto.Data)
}
inline void DicomFileDto::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DicomFileDto.Data)
}
inline void DicomFileDto::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DicomFileDto.Data)
}
inline std::string* DicomFileDto::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicomFileDto::release_data() {
  // @@protoc_insertion_point(field_release:DicomFileDto.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomFileDto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DicomFileDto.Data)
}

// -------------------------------------------------------------------

// MetadataDto

// string Key = 1;
inline void MetadataDto::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MetadataDto::key() const {
  // @@protoc_insertion_point(field_get:MetadataDto.Key)
  return _internal_key();
}
inline void MetadataDto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:MetadataDto.Key)
}
inline std::string* MetadataDto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:MetadataDto.Key)
  return _internal_mutable_key();
}
inline const std::string& MetadataDto::_internal_key() const {
  return key_.Get();
}
inline void MetadataDto::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetadataDto::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetadataDto.Key)
}
inline void MetadataDto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetadataDto.Key)
}
inline void MetadataDto::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetadataDto.Key)
}
inline std::string* MetadataDto::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetadataDto::release_key() {
  // @@protoc_insertion_point(field_release:MetadataDto.Key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataDto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetadataDto.Key)
}

// string Value = 2;
inline void MetadataDto::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& MetadataDto::value() const {
  // @@protoc_insertion_point(field_get:MetadataDto.Value)
  return _internal_value();
}
inline void MetadataDto::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MetadataDto.Value)
}
inline std::string* MetadataDto::mutable_value() {
  // @@protoc_insertion_point(field_mutable:MetadataDto.Value)
  return _internal_mutable_value();
}
inline const std::string& MetadataDto::_internal_value() const {
  return value_.Get();
}
inline void MetadataDto::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MetadataDto::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetadataDto.Value)
}
inline void MetadataDto::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetadataDto.Value)
}
inline void MetadataDto::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetadataDto.Value)
}
inline std::string* MetadataDto::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MetadataDto::release_value() {
  // @@protoc_insertion_point(field_release:MetadataDto.Value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataDto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetadataDto.Value)
}

// -------------------------------------------------------------------

// ProcessResult

// repeated .MetadataDto Metadata = 1;
inline int ProcessResult::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ProcessResult::metadata_size() const {
  return _internal_metadata_size();
}
inline void ProcessResult::clear_metadata() {
  metadata_.Clear();
}
inline ::MetadataDto* ProcessResult::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:ProcessResult.Metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >*
ProcessResult::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:ProcessResult.Metadata)
  return &metadata_;
}
inline const ::MetadataDto& ProcessResult::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::MetadataDto& ProcessResult::metadata(int index) const {
  // @@protoc_insertion_point(field_get:ProcessResult.Metadata)
  return _internal_metadata(index);
}
inline ::MetadataDto* ProcessResult::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::MetadataDto* ProcessResult::add_metadata() {
  // @@protoc_insertion_point(field_add:ProcessResult.Metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetadataDto >&
ProcessResult::metadata() const {
  // @@protoc_insertion_point(field_list:ProcessResult.Metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// NotificationMessageDto

// string Message = 1;
inline void NotificationMessageDto::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& NotificationMessageDto::message() const {
  // @@protoc_insertion_point(field_get:NotificationMessageDto.Message)
  return _internal_message();
}
inline void NotificationMessageDto::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:NotificationMessageDto.Message)
}
inline std::string* NotificationMessageDto::mutable_message() {
  // @@protoc_insertion_point(field_mutable:NotificationMessageDto.Message)
  return _internal_mutable_message();
}
inline const std::string& NotificationMessageDto::_internal_message() const {
  return message_.Get();
}
inline void NotificationMessageDto::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NotificationMessageDto::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NotificationMessageDto.Message)
}
inline void NotificationMessageDto::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:NotificationMessageDto.Message)
}
inline void NotificationMessageDto::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NotificationMessageDto.Message)
}
inline std::string* NotificationMessageDto::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NotificationMessageDto::release_message() {
  // @@protoc_insertion_point(field_release:NotificationMessageDto.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationMessageDto::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NotificationMessageDto.Message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserService_2eproto
